// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type MovieReviewsRequest struct {
	MovieID  int     `pathParam:"style=simple,explode=false,name=movie_id"`
	Language *string `default:"en-US" queryParam:"style=form,explode=true,name=language"`
	Page     *int    `default:"1" queryParam:"style=form,explode=true,name=page"`
}

func (m MovieReviewsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovieReviewsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MovieReviewsRequest) GetMovieID() int {
	if o == nil {
		return 0
	}
	return o.MovieID
}

func (o *MovieReviewsRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *MovieReviewsRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

type MovieReviews200ApplicationJSONResultsAuthorDetails struct {
	AvatarPath *string     `json:"avatar_path,omitempty"`
	Name       *string     `json:"name,omitempty"`
	Rating     interface{} `json:"rating,omitempty"`
	Username   *string     `json:"username,omitempty"`
}

func (o *MovieReviews200ApplicationJSONResultsAuthorDetails) GetAvatarPath() *string {
	if o == nil {
		return nil
	}
	return o.AvatarPath
}

func (o *MovieReviews200ApplicationJSONResultsAuthorDetails) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MovieReviews200ApplicationJSONResultsAuthorDetails) GetRating() interface{} {
	if o == nil {
		return nil
	}
	return o.Rating
}

func (o *MovieReviews200ApplicationJSONResultsAuthorDetails) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type MovieReviews200ApplicationJSONResults struct {
	Author        *string                                             `json:"author,omitempty"`
	AuthorDetails *MovieReviews200ApplicationJSONResultsAuthorDetails `json:"author_details,omitempty"`
	Content       *string                                             `json:"content,omitempty"`
	CreatedAt     *string                                             `json:"created_at,omitempty"`
	ID            *string                                             `json:"id,omitempty"`
	UpdatedAt     *string                                             `json:"updated_at,omitempty"`
	URL           *string                                             `json:"url,omitempty"`
}

func (o *MovieReviews200ApplicationJSONResults) GetAuthor() *string {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *MovieReviews200ApplicationJSONResults) GetAuthorDetails() *MovieReviews200ApplicationJSONResultsAuthorDetails {
	if o == nil {
		return nil
	}
	return o.AuthorDetails
}

func (o *MovieReviews200ApplicationJSONResults) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *MovieReviews200ApplicationJSONResults) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *MovieReviews200ApplicationJSONResults) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MovieReviews200ApplicationJSONResults) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *MovieReviews200ApplicationJSONResults) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

// MovieReviews200ApplicationJSON - 200
type MovieReviews200ApplicationJSON struct {
	ID           *int64                                  `default:"0" json:"id"`
	Page         *int64                                  `default:"0" json:"page"`
	Results      []MovieReviews200ApplicationJSONResults `json:"results,omitempty"`
	TotalPages   *int64                                  `default:"0" json:"total_pages"`
	TotalResults *int64                                  `default:"0" json:"total_results"`
}

func (m MovieReviews200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovieReviews200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MovieReviews200ApplicationJSON) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MovieReviews200ApplicationJSON) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *MovieReviews200ApplicationJSON) GetResults() []MovieReviews200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *MovieReviews200ApplicationJSON) GetTotalPages() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalPages
}

func (o *MovieReviews200ApplicationJSON) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

type MovieReviewsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	MovieReviews200ApplicationJSONObject *MovieReviews200ApplicationJSON
}

func (o *MovieReviewsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *MovieReviewsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *MovieReviewsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *MovieReviewsResponse) GetMovieReviews200ApplicationJSONObject() *MovieReviews200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.MovieReviews200ApplicationJSONObject
}
