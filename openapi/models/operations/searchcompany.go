// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type SearchCompanyRequest struct {
	Query string `queryParam:"style=form,explode=true,name=query"`
	Page  *int   `default:"1" queryParam:"style=form,explode=true,name=page"`
}

func (s SearchCompanyRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchCompanyRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchCompanyRequest) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *SearchCompanyRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

type SearchCompany200ApplicationJSONResults struct {
	ID            *int64  `default:"0" json:"id"`
	LogoPath      *string `json:"logo_path,omitempty"`
	Name          *string `json:"name,omitempty"`
	OriginCountry *string `json:"origin_country,omitempty"`
}

func (s SearchCompany200ApplicationJSONResults) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchCompany200ApplicationJSONResults) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchCompany200ApplicationJSONResults) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SearchCompany200ApplicationJSONResults) GetLogoPath() *string {
	if o == nil {
		return nil
	}
	return o.LogoPath
}

func (o *SearchCompany200ApplicationJSONResults) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SearchCompany200ApplicationJSONResults) GetOriginCountry() *string {
	if o == nil {
		return nil
	}
	return o.OriginCountry
}

// SearchCompany200ApplicationJSON - 200
type SearchCompany200ApplicationJSON struct {
	Page         *int64                                   `default:"0" json:"page"`
	Results      []SearchCompany200ApplicationJSONResults `json:"results,omitempty"`
	TotalPages   *int64                                   `default:"0" json:"total_pages"`
	TotalResults *int64                                   `default:"0" json:"total_results"`
}

func (s SearchCompany200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchCompany200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchCompany200ApplicationJSON) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchCompany200ApplicationJSON) GetResults() []SearchCompany200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *SearchCompany200ApplicationJSON) GetTotalPages() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalPages
}

func (o *SearchCompany200ApplicationJSON) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

type SearchCompanyResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	SearchCompany200ApplicationJSONObject *SearchCompany200ApplicationJSON
}

func (o *SearchCompanyResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *SearchCompanyResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *SearchCompanyResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *SearchCompanyResponse) GetSearchCompany200ApplicationJSONObject() *SearchCompany200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.SearchCompany200ApplicationJSONObject
}
