// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

// MovieLatestID200ApplicationJSON - 200
type MovieLatestID200ApplicationJSON struct {
	Adult               *bool         `default:"true" json:"adult"`
	BackdropPath        interface{}   `json:"backdrop_path,omitempty"`
	BelongsToCollection interface{}   `json:"belongs_to_collection,omitempty"`
	Budget              *int64        `default:"0" json:"budget"`
	Genres              []interface{} `json:"genres,omitempty"`
	Homepage            *string       `json:"homepage,omitempty"`
	ID                  *int64        `default:"0" json:"id"`
	ImdbID              interface{}   `json:"imdb_id,omitempty"`
	OriginalLanguage    *string       `json:"original_language,omitempty"`
	OriginalTitle       *string       `json:"original_title,omitempty"`
	Overview            *string       `json:"overview,omitempty"`
	Popularity          *int64        `default:"0" json:"popularity"`
	PosterPath          interface{}   `json:"poster_path,omitempty"`
	ProductionCompanies []interface{} `json:"production_companies,omitempty"`
	ProductionCountries []interface{} `json:"production_countries,omitempty"`
	ReleaseDate         *string       `json:"release_date,omitempty"`
	Revenue             *int64        `default:"0" json:"revenue"`
	Runtime             *int64        `default:"0" json:"runtime"`
	SpokenLanguages     []interface{} `json:"spoken_languages,omitempty"`
	Status              *string       `json:"status,omitempty"`
	Tagline             *string       `json:"tagline,omitempty"`
	Title               *string       `json:"title,omitempty"`
	Video               *bool         `default:"true" json:"video"`
	VoteAverage         *int64        `default:"0" json:"vote_average"`
	VoteCount           *int64        `default:"0" json:"vote_count"`
}

func (m MovieLatestID200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovieLatestID200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MovieLatestID200ApplicationJSON) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *MovieLatestID200ApplicationJSON) GetBackdropPath() interface{} {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *MovieLatestID200ApplicationJSON) GetBelongsToCollection() interface{} {
	if o == nil {
		return nil
	}
	return o.BelongsToCollection
}

func (o *MovieLatestID200ApplicationJSON) GetBudget() *int64 {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *MovieLatestID200ApplicationJSON) GetGenres() []interface{} {
	if o == nil {
		return nil
	}
	return o.Genres
}

func (o *MovieLatestID200ApplicationJSON) GetHomepage() *string {
	if o == nil {
		return nil
	}
	return o.Homepage
}

func (o *MovieLatestID200ApplicationJSON) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MovieLatestID200ApplicationJSON) GetImdbID() interface{} {
	if o == nil {
		return nil
	}
	return o.ImdbID
}

func (o *MovieLatestID200ApplicationJSON) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *MovieLatestID200ApplicationJSON) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *MovieLatestID200ApplicationJSON) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *MovieLatestID200ApplicationJSON) GetPopularity() *int64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *MovieLatestID200ApplicationJSON) GetPosterPath() interface{} {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *MovieLatestID200ApplicationJSON) GetProductionCompanies() []interface{} {
	if o == nil {
		return nil
	}
	return o.ProductionCompanies
}

func (o *MovieLatestID200ApplicationJSON) GetProductionCountries() []interface{} {
	if o == nil {
		return nil
	}
	return o.ProductionCountries
}

func (o *MovieLatestID200ApplicationJSON) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *MovieLatestID200ApplicationJSON) GetRevenue() *int64 {
	if o == nil {
		return nil
	}
	return o.Revenue
}

func (o *MovieLatestID200ApplicationJSON) GetRuntime() *int64 {
	if o == nil {
		return nil
	}
	return o.Runtime
}

func (o *MovieLatestID200ApplicationJSON) GetSpokenLanguages() []interface{} {
	if o == nil {
		return nil
	}
	return o.SpokenLanguages
}

func (o *MovieLatestID200ApplicationJSON) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *MovieLatestID200ApplicationJSON) GetTagline() *string {
	if o == nil {
		return nil
	}
	return o.Tagline
}

func (o *MovieLatestID200ApplicationJSON) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *MovieLatestID200ApplicationJSON) GetVideo() *bool {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *MovieLatestID200ApplicationJSON) GetVoteAverage() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *MovieLatestID200ApplicationJSON) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

type MovieLatestIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	MovieLatestID200ApplicationJSONObject *MovieLatestID200ApplicationJSON
}

func (o *MovieLatestIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *MovieLatestIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *MovieLatestIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *MovieLatestIDResponse) GetMovieLatestID200ApplicationJSONObject() *MovieLatestID200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.MovieLatestID200ApplicationJSONObject
}
