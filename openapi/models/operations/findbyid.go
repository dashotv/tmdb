// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type FindByIDExternalSource string

const (
	FindByIDExternalSourceUnknown     FindByIDExternalSource = ""
	FindByIDExternalSourceImdbID      FindByIDExternalSource = "imdb_id"
	FindByIDExternalSourceFacebookID  FindByIDExternalSource = "facebook_id"
	FindByIDExternalSourceInstagramID FindByIDExternalSource = "instagram_id"
	FindByIDExternalSourceTvdbID      FindByIDExternalSource = "tvdb_id"
	FindByIDExternalSourceTiktokID    FindByIDExternalSource = "tiktok_id"
	FindByIDExternalSourceTwitterID   FindByIDExternalSource = "twitter_id"
	FindByIDExternalSourceWikidataID  FindByIDExternalSource = "wikidata_id"
	FindByIDExternalSourceYoutubeID   FindByIDExternalSource = "youtube_id"
)

func (e FindByIDExternalSource) ToPointer() *FindByIDExternalSource {
	return &e
}

func (e *FindByIDExternalSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "imdb_id":
		fallthrough
	case "facebook_id":
		fallthrough
	case "instagram_id":
		fallthrough
	case "tvdb_id":
		fallthrough
	case "tiktok_id":
		fallthrough
	case "twitter_id":
		fallthrough
	case "wikidata_id":
		fallthrough
	case "youtube_id":
		*e = FindByIDExternalSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindByIDExternalSource: %v", v)
	}
}

type FindByIDRequest struct {
	ExternalID     string                 `pathParam:"style=simple,explode=false,name=external_id"`
	ExternalSource FindByIDExternalSource `queryParam:"style=form,explode=true,name=external_source"`
	Language       *string                `queryParam:"style=form,explode=true,name=language"`
}

func (o *FindByIDRequest) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *FindByIDRequest) GetExternalSource() FindByIDExternalSource {
	if o == nil {
		return FindByIDExternalSource("")
	}
	return o.ExternalSource
}

func (o *FindByIDRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

type FindByID200ApplicationJSONMovieResults struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	MediaType        *string  `json:"media_type,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Video            *bool    `default:"true" json:"video"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (f FindByID200ApplicationJSONMovieResults) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FindByID200ApplicationJSONMovieResults) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FindByID200ApplicationJSONMovieResults) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *FindByID200ApplicationJSONMovieResults) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *FindByID200ApplicationJSONMovieResults) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *FindByID200ApplicationJSONMovieResults) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FindByID200ApplicationJSONMovieResults) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *FindByID200ApplicationJSONMovieResults) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *FindByID200ApplicationJSONMovieResults) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *FindByID200ApplicationJSONMovieResults) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *FindByID200ApplicationJSONMovieResults) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *FindByID200ApplicationJSONMovieResults) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *FindByID200ApplicationJSONMovieResults) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *FindByID200ApplicationJSONMovieResults) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *FindByID200ApplicationJSONMovieResults) GetVideo() *bool {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *FindByID200ApplicationJSONMovieResults) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *FindByID200ApplicationJSONMovieResults) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

// FindByID200ApplicationJSON - 200
type FindByID200ApplicationJSON struct {
	MovieResults     []FindByID200ApplicationJSONMovieResults `json:"movie_results,omitempty"`
	PersonResults    []interface{}                            `json:"person_results,omitempty"`
	TvEpisodeResults []interface{}                            `json:"tv_episode_results,omitempty"`
	TvResults        []interface{}                            `json:"tv_results,omitempty"`
	TvSeasonResults  []interface{}                            `json:"tv_season_results,omitempty"`
}

func (o *FindByID200ApplicationJSON) GetMovieResults() []FindByID200ApplicationJSONMovieResults {
	if o == nil {
		return nil
	}
	return o.MovieResults
}

func (o *FindByID200ApplicationJSON) GetPersonResults() []interface{} {
	if o == nil {
		return nil
	}
	return o.PersonResults
}

func (o *FindByID200ApplicationJSON) GetTvEpisodeResults() []interface{} {
	if o == nil {
		return nil
	}
	return o.TvEpisodeResults
}

func (o *FindByID200ApplicationJSON) GetTvResults() []interface{} {
	if o == nil {
		return nil
	}
	return o.TvResults
}

func (o *FindByID200ApplicationJSON) GetTvSeasonResults() []interface{} {
	if o == nil {
		return nil
	}
	return o.TvSeasonResults
}

type FindByIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	FindByID200ApplicationJSONObject *FindByID200ApplicationJSON
}

func (o *FindByIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *FindByIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *FindByIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *FindByIDResponse) GetFindByID200ApplicationJSONObject() *FindByID200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.FindByID200ApplicationJSONObject
}
