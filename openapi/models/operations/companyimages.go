// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type CompanyImagesRequest struct {
	CompanyID int `pathParam:"style=simple,explode=false,name=company_id"`
}

func (o *CompanyImagesRequest) GetCompanyID() int {
	if o == nil {
		return 0
	}
	return o.CompanyID
}

type CompanyImages200ApplicationJSONLogos struct {
	AspectRatio *float64 `default:"0" json:"aspect_ratio"`
	FilePath    *string  `json:"file_path,omitempty"`
	FileType    *string  `json:"file_type,omitempty"`
	Height      *int64   `default:"0" json:"height"`
	ID          *string  `json:"id,omitempty"`
	VoteAverage *float64 `default:"0" json:"vote_average"`
	VoteCount   *int64   `default:"0" json:"vote_count"`
	Width       *int64   `default:"0" json:"width"`
}

func (c CompanyImages200ApplicationJSONLogos) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CompanyImages200ApplicationJSONLogos) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CompanyImages200ApplicationJSONLogos) GetAspectRatio() *float64 {
	if o == nil {
		return nil
	}
	return o.AspectRatio
}

func (o *CompanyImages200ApplicationJSONLogos) GetFilePath() *string {
	if o == nil {
		return nil
	}
	return o.FilePath
}

func (o *CompanyImages200ApplicationJSONLogos) GetFileType() *string {
	if o == nil {
		return nil
	}
	return o.FileType
}

func (o *CompanyImages200ApplicationJSONLogos) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *CompanyImages200ApplicationJSONLogos) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CompanyImages200ApplicationJSONLogos) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *CompanyImages200ApplicationJSONLogos) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

func (o *CompanyImages200ApplicationJSONLogos) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

// CompanyImages200ApplicationJSON - 200
type CompanyImages200ApplicationJSON struct {
	ID    *int64                                 `default:"0" json:"id"`
	Logos []CompanyImages200ApplicationJSONLogos `json:"logos,omitempty"`
}

func (c CompanyImages200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CompanyImages200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CompanyImages200ApplicationJSON) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CompanyImages200ApplicationJSON) GetLogos() []CompanyImages200ApplicationJSONLogos {
	if o == nil {
		return nil
	}
	return o.Logos
}

type CompanyImagesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	CompanyImages200ApplicationJSONObject *CompanyImages200ApplicationJSON
}

func (o *CompanyImagesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CompanyImagesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CompanyImagesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CompanyImagesResponse) GetCompanyImages200ApplicationJSONObject() *CompanyImages200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CompanyImages200ApplicationJSONObject
}
