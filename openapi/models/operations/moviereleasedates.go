// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type MovieReleaseDatesRequest struct {
	MovieID int `pathParam:"style=simple,explode=false,name=movie_id"`
}

func (o *MovieReleaseDatesRequest) GetMovieID() int {
	if o == nil {
		return 0
	}
	return o.MovieID
}

type MovieReleaseDates200ApplicationJSONResultsReleaseDates struct {
	Certification *string       `json:"certification,omitempty"`
	Descriptors   []interface{} `json:"descriptors,omitempty"`
	Iso6391       *string       `json:"iso_639_1,omitempty"`
	Note          *string       `json:"note,omitempty"`
	ReleaseDate   *string       `json:"release_date,omitempty"`
	Type          *int64        `default:"0" json:"type"`
}

func (m MovieReleaseDates200ApplicationJSONResultsReleaseDates) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovieReleaseDates200ApplicationJSONResultsReleaseDates) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MovieReleaseDates200ApplicationJSONResultsReleaseDates) GetCertification() *string {
	if o == nil {
		return nil
	}
	return o.Certification
}

func (o *MovieReleaseDates200ApplicationJSONResultsReleaseDates) GetDescriptors() []interface{} {
	if o == nil {
		return nil
	}
	return o.Descriptors
}

func (o *MovieReleaseDates200ApplicationJSONResultsReleaseDates) GetIso6391() *string {
	if o == nil {
		return nil
	}
	return o.Iso6391
}

func (o *MovieReleaseDates200ApplicationJSONResultsReleaseDates) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *MovieReleaseDates200ApplicationJSONResultsReleaseDates) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *MovieReleaseDates200ApplicationJSONResultsReleaseDates) GetType() *int64 {
	if o == nil {
		return nil
	}
	return o.Type
}

type MovieReleaseDates200ApplicationJSONResults struct {
	Iso31661     *string                                                  `json:"iso_3166_1,omitempty"`
	ReleaseDates []MovieReleaseDates200ApplicationJSONResultsReleaseDates `json:"release_dates,omitempty"`
}

func (o *MovieReleaseDates200ApplicationJSONResults) GetIso31661() *string {
	if o == nil {
		return nil
	}
	return o.Iso31661
}

func (o *MovieReleaseDates200ApplicationJSONResults) GetReleaseDates() []MovieReleaseDates200ApplicationJSONResultsReleaseDates {
	if o == nil {
		return nil
	}
	return o.ReleaseDates
}

// MovieReleaseDates200ApplicationJSON - 200
type MovieReleaseDates200ApplicationJSON struct {
	ID      *int64                                       `default:"0" json:"id"`
	Results []MovieReleaseDates200ApplicationJSONResults `json:"results,omitempty"`
}

func (m MovieReleaseDates200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovieReleaseDates200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MovieReleaseDates200ApplicationJSON) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MovieReleaseDates200ApplicationJSON) GetResults() []MovieReleaseDates200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

type MovieReleaseDatesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	MovieReleaseDates200ApplicationJSONObject *MovieReleaseDates200ApplicationJSON
}

func (o *MovieReleaseDatesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *MovieReleaseDatesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *MovieReleaseDatesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *MovieReleaseDatesResponse) GetMovieReleaseDates200ApplicationJSONObject() *MovieReleaseDates200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.MovieReleaseDates200ApplicationJSONObject
}
