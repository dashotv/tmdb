// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type TvSeasonVideosRequest struct {
	SeasonNumber int `pathParam:"style=simple,explode=false,name=season_number"`
	SeriesID     int `pathParam:"style=simple,explode=false,name=series_id"`
	// filter the list results by language, supports more than one value by using a comma
	IncludeVideoLanguage *string `queryParam:"style=form,explode=true,name=include_video_language"`
	Language             *string `default:"en-US" queryParam:"style=form,explode=true,name=language"`
}

func (t TvSeasonVideosRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TvSeasonVideosRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TvSeasonVideosRequest) GetSeasonNumber() int {
	if o == nil {
		return 0
	}
	return o.SeasonNumber
}

func (o *TvSeasonVideosRequest) GetSeriesID() int {
	if o == nil {
		return 0
	}
	return o.SeriesID
}

func (o *TvSeasonVideosRequest) GetIncludeVideoLanguage() *string {
	if o == nil {
		return nil
	}
	return o.IncludeVideoLanguage
}

func (o *TvSeasonVideosRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

type TvSeasonVideos200ApplicationJSONResults struct {
	ID          *string `json:"id,omitempty"`
	Iso31661    *string `json:"iso_3166_1,omitempty"`
	Iso6391     *string `json:"iso_639_1,omitempty"`
	Key         *string `json:"key,omitempty"`
	Name        *string `json:"name,omitempty"`
	Official    *bool   `default:"true" json:"official"`
	PublishedAt *string `json:"published_at,omitempty"`
	Site        *string `json:"site,omitempty"`
	Size        *int64  `default:"0" json:"size"`
	Type        *string `json:"type,omitempty"`
}

func (t TvSeasonVideos200ApplicationJSONResults) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TvSeasonVideos200ApplicationJSONResults) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetIso31661() *string {
	if o == nil {
		return nil
	}
	return o.Iso31661
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetIso6391() *string {
	if o == nil {
		return nil
	}
	return o.Iso6391
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetOfficial() *bool {
	if o == nil {
		return nil
	}
	return o.Official
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetPublishedAt() *string {
	if o == nil {
		return nil
	}
	return o.PublishedAt
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetSite() *string {
	if o == nil {
		return nil
	}
	return o.Site
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *TvSeasonVideos200ApplicationJSONResults) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// TvSeasonVideos200ApplicationJSON - 200
type TvSeasonVideos200ApplicationJSON struct {
	ID      *int64                                    `default:"0" json:"id"`
	Results []TvSeasonVideos200ApplicationJSONResults `json:"results,omitempty"`
}

func (t TvSeasonVideos200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TvSeasonVideos200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TvSeasonVideos200ApplicationJSON) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TvSeasonVideos200ApplicationJSON) GetResults() []TvSeasonVideos200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

type TvSeasonVideosResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	TvSeasonVideos200ApplicationJSONObject *TvSeasonVideos200ApplicationJSON
}

func (o *TvSeasonVideosResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TvSeasonVideosResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TvSeasonVideosResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *TvSeasonVideosResponse) GetTvSeasonVideos200ApplicationJSONObject() *TvSeasonVideos200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.TvSeasonVideos200ApplicationJSONObject
}
