// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type PersonCombinedCreditsRequest struct {
	PersonID string  `pathParam:"style=simple,explode=false,name=person_id"`
	Language *string `default:"en-US" queryParam:"style=form,explode=true,name=language"`
}

func (p PersonCombinedCreditsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonCombinedCreditsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonCombinedCreditsRequest) GetPersonID() string {
	if o == nil {
		return ""
	}
	return o.PersonID
}

func (o *PersonCombinedCreditsRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

type PersonCombinedCredits200ApplicationJSONCast struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	Character        *string  `json:"character,omitempty"`
	CreditID         *string  `json:"credit_id,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	MediaType        *string  `json:"media_type,omitempty"`
	Order            *int64   `default:"0" json:"order"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Video            *bool    `default:"true" json:"video"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (p PersonCombinedCredits200ApplicationJSONCast) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonCombinedCredits200ApplicationJSONCast) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetCharacter() *string {
	if o == nil {
		return nil
	}
	return o.Character
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetCreditID() *string {
	if o == nil {
		return nil
	}
	return o.CreditID
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetVideo() *bool {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *PersonCombinedCredits200ApplicationJSONCast) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

type PersonCombinedCredits200ApplicationJSONCrew struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	CreditID         *string  `json:"credit_id,omitempty"`
	Department       *string  `json:"department,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	Job              *string  `json:"job,omitempty"`
	MediaType        *string  `json:"media_type,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Video            *bool    `default:"true" json:"video"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (p PersonCombinedCredits200ApplicationJSONCrew) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonCombinedCredits200ApplicationJSONCrew) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetCreditID() *string {
	if o == nil {
		return nil
	}
	return o.CreditID
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetJob() *string {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetVideo() *bool {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *PersonCombinedCredits200ApplicationJSONCrew) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

// PersonCombinedCredits200ApplicationJSON - 200
type PersonCombinedCredits200ApplicationJSON struct {
	Cast []PersonCombinedCredits200ApplicationJSONCast `json:"cast,omitempty"`
	Crew []PersonCombinedCredits200ApplicationJSONCrew `json:"crew,omitempty"`
	ID   *int64                                        `default:"0" json:"id"`
}

func (p PersonCombinedCredits200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonCombinedCredits200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonCombinedCredits200ApplicationJSON) GetCast() []PersonCombinedCredits200ApplicationJSONCast {
	if o == nil {
		return nil
	}
	return o.Cast
}

func (o *PersonCombinedCredits200ApplicationJSON) GetCrew() []PersonCombinedCredits200ApplicationJSONCrew {
	if o == nil {
		return nil
	}
	return o.Crew
}

func (o *PersonCombinedCredits200ApplicationJSON) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

type PersonCombinedCreditsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	PersonCombinedCredits200ApplicationJSONObject *PersonCombinedCredits200ApplicationJSON
}

func (o *PersonCombinedCreditsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PersonCombinedCreditsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PersonCombinedCreditsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PersonCombinedCreditsResponse) GetPersonCombinedCredits200ApplicationJSONObject() *PersonCombinedCredits200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.PersonCombinedCredits200ApplicationJSONObject
}
