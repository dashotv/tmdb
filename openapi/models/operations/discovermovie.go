// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dashotv/tmdb/openapi/types"
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type DiscoverMovieSortBy string

const (
	DiscoverMovieSortByPopularityAsc          DiscoverMovieSortBy = "popularity.asc"
	DiscoverMovieSortByPopularityDesc         DiscoverMovieSortBy = "popularity.desc"
	DiscoverMovieSortByRevenueAsc             DiscoverMovieSortBy = "revenue.asc"
	DiscoverMovieSortByRevenueDesc            DiscoverMovieSortBy = "revenue.desc"
	DiscoverMovieSortByPrimaryReleaseDateAsc  DiscoverMovieSortBy = "primary_release_date.asc"
	DiscoverMovieSortByPrimaryReleaseDateDesc DiscoverMovieSortBy = "primary_release_date.desc"
	DiscoverMovieSortByVoteAverageAsc         DiscoverMovieSortBy = "vote_average.asc"
	DiscoverMovieSortByVoteAverageDesc        DiscoverMovieSortBy = "vote_average.desc"
	DiscoverMovieSortByVoteCountAsc           DiscoverMovieSortBy = "vote_count.asc"
	DiscoverMovieSortByVoteCountDesc          DiscoverMovieSortBy = "vote_count.desc"
)

func (e DiscoverMovieSortBy) ToPointer() *DiscoverMovieSortBy {
	return &e
}

func (e *DiscoverMovieSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "popularity.asc":
		fallthrough
	case "popularity.desc":
		fallthrough
	case "revenue.asc":
		fallthrough
	case "revenue.desc":
		fallthrough
	case "primary_release_date.asc":
		fallthrough
	case "primary_release_date.desc":
		fallthrough
	case "vote_average.asc":
		fallthrough
	case "vote_average.desc":
		fallthrough
	case "vote_count.asc":
		fallthrough
	case "vote_count.desc":
		*e = DiscoverMovieSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscoverMovieSortBy: %v", v)
	}
}

type DiscoverMovieRequest struct {
	// use in conjunction with `region`
	Certification *string `queryParam:"style=form,explode=true,name=certification"`
	// use in conjunction with `region`
	Gte *string `queryParam:"style=form,explode=true,name=certification.gte"`
	// use in conjunction with `region`
	Lte *string `queryParam:"style=form,explode=true,name=certification.lte"`
	// use in conjunction with the `certification`, `certification.gte` and `certification.lte` filters
	CertificationCountry  *string              `queryParam:"style=form,explode=true,name=certification_country"`
	IncludeAdult          *bool                `default:"false" queryParam:"style=form,explode=true,name=include_adult"`
	IncludeVideo          *bool                `default:"false" queryParam:"style=form,explode=true,name=include_video"`
	Language              *string              `default:"en-US" queryParam:"style=form,explode=true,name=language"`
	Page                  *int                 `default:"1" queryParam:"style=form,explode=true,name=page"`
	PrimaryReleaseDateGte *types.Date          `queryParam:"style=form,explode=true,name=primary_release_date.gte"`
	PrimaryReleaseDateLte *types.Date          `queryParam:"style=form,explode=true,name=primary_release_date.lte"`
	PrimaryReleaseYear    *int                 `queryParam:"style=form,explode=true,name=primary_release_year"`
	Region                *string              `queryParam:"style=form,explode=true,name=region"`
	ReleaseDateGte        *types.Date          `queryParam:"style=form,explode=true,name=release_date.gte"`
	ReleaseDateLte        *types.Date          `queryParam:"style=form,explode=true,name=release_date.lte"`
	SortBy                *DiscoverMovieSortBy `default:"popularity.desc" queryParam:"style=form,explode=true,name=sort_by"`
	VoteAverageGte        *float32             `queryParam:"style=form,explode=true,name=vote_average.gte"`
	VoteAverageLte        *float32             `queryParam:"style=form,explode=true,name=vote_average.lte"`
	VoteCountGte          *float32             `queryParam:"style=form,explode=true,name=vote_count.gte"`
	VoteCountLte          *float32             `queryParam:"style=form,explode=true,name=vote_count.lte"`
	WatchRegion           *string              `queryParam:"style=form,explode=true,name=watch_region"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithCast *string `queryParam:"style=form,explode=true,name=with_cast"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithCompanies *string `queryParam:"style=form,explode=true,name=with_companies"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithCrew *string `queryParam:"style=form,explode=true,name=with_crew"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithGenres *string `queryParam:"style=form,explode=true,name=with_genres"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithKeywords         *string `queryParam:"style=form,explode=true,name=with_keywords"`
	WithOriginCountry    *string `queryParam:"style=form,explode=true,name=with_origin_country"`
	WithOriginalLanguage *string `queryParam:"style=form,explode=true,name=with_original_language"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithPeople *string `queryParam:"style=form,explode=true,name=with_people"`
	// can be a comma (`AND`) or pipe (`OR`) separated query, can be used in conjunction with `region`
	WithReleaseType *int `queryParam:"style=form,explode=true,name=with_release_type"`
	WithRuntimeGte  *int `queryParam:"style=form,explode=true,name=with_runtime.gte"`
	WithRuntimeLte  *int `queryParam:"style=form,explode=true,name=with_runtime.lte"`
	// use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
	WithWatchMonetizationTypes *string `queryParam:"style=form,explode=true,name=with_watch_monetization_types"`
	// use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
	WithWatchProviders    *string `queryParam:"style=form,explode=true,name=with_watch_providers"`
	WithoutCompanies      *string `queryParam:"style=form,explode=true,name=without_companies"`
	WithoutGenres         *string `queryParam:"style=form,explode=true,name=without_genres"`
	WithoutKeywords       *string `queryParam:"style=form,explode=true,name=without_keywords"`
	WithoutWatchProviders *string `queryParam:"style=form,explode=true,name=without_watch_providers"`
	Year                  *int    `queryParam:"style=form,explode=true,name=year"`
}

func (d DiscoverMovieRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscoverMovieRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DiscoverMovieRequest) GetCertification() *string {
	if o == nil {
		return nil
	}
	return o.Certification
}

func (o *DiscoverMovieRequest) GetGte() *string {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *DiscoverMovieRequest) GetLte() *string {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *DiscoverMovieRequest) GetCertificationCountry() *string {
	if o == nil {
		return nil
	}
	return o.CertificationCountry
}

func (o *DiscoverMovieRequest) GetIncludeAdult() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeAdult
}

func (o *DiscoverMovieRequest) GetIncludeVideo() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeVideo
}

func (o *DiscoverMovieRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *DiscoverMovieRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *DiscoverMovieRequest) GetPrimaryReleaseDateGte() *types.Date {
	if o == nil {
		return nil
	}
	return o.PrimaryReleaseDateGte
}

func (o *DiscoverMovieRequest) GetPrimaryReleaseDateLte() *types.Date {
	if o == nil {
		return nil
	}
	return o.PrimaryReleaseDateLte
}

func (o *DiscoverMovieRequest) GetPrimaryReleaseYear() *int {
	if o == nil {
		return nil
	}
	return o.PrimaryReleaseYear
}

func (o *DiscoverMovieRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *DiscoverMovieRequest) GetReleaseDateGte() *types.Date {
	if o == nil {
		return nil
	}
	return o.ReleaseDateGte
}

func (o *DiscoverMovieRequest) GetReleaseDateLte() *types.Date {
	if o == nil {
		return nil
	}
	return o.ReleaseDateLte
}

func (o *DiscoverMovieRequest) GetSortBy() *DiscoverMovieSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *DiscoverMovieRequest) GetVoteAverageGte() *float32 {
	if o == nil {
		return nil
	}
	return o.VoteAverageGte
}

func (o *DiscoverMovieRequest) GetVoteAverageLte() *float32 {
	if o == nil {
		return nil
	}
	return o.VoteAverageLte
}

func (o *DiscoverMovieRequest) GetVoteCountGte() *float32 {
	if o == nil {
		return nil
	}
	return o.VoteCountGte
}

func (o *DiscoverMovieRequest) GetVoteCountLte() *float32 {
	if o == nil {
		return nil
	}
	return o.VoteCountLte
}

func (o *DiscoverMovieRequest) GetWatchRegion() *string {
	if o == nil {
		return nil
	}
	return o.WatchRegion
}

func (o *DiscoverMovieRequest) GetWithCast() *string {
	if o == nil {
		return nil
	}
	return o.WithCast
}

func (o *DiscoverMovieRequest) GetWithCompanies() *string {
	if o == nil {
		return nil
	}
	return o.WithCompanies
}

func (o *DiscoverMovieRequest) GetWithCrew() *string {
	if o == nil {
		return nil
	}
	return o.WithCrew
}

func (o *DiscoverMovieRequest) GetWithGenres() *string {
	if o == nil {
		return nil
	}
	return o.WithGenres
}

func (o *DiscoverMovieRequest) GetWithKeywords() *string {
	if o == nil {
		return nil
	}
	return o.WithKeywords
}

func (o *DiscoverMovieRequest) GetWithOriginCountry() *string {
	if o == nil {
		return nil
	}
	return o.WithOriginCountry
}

func (o *DiscoverMovieRequest) GetWithOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.WithOriginalLanguage
}

func (o *DiscoverMovieRequest) GetWithPeople() *string {
	if o == nil {
		return nil
	}
	return o.WithPeople
}

func (o *DiscoverMovieRequest) GetWithReleaseType() *int {
	if o == nil {
		return nil
	}
	return o.WithReleaseType
}

func (o *DiscoverMovieRequest) GetWithRuntimeGte() *int {
	if o == nil {
		return nil
	}
	return o.WithRuntimeGte
}

func (o *DiscoverMovieRequest) GetWithRuntimeLte() *int {
	if o == nil {
		return nil
	}
	return o.WithRuntimeLte
}

func (o *DiscoverMovieRequest) GetWithWatchMonetizationTypes() *string {
	if o == nil {
		return nil
	}
	return o.WithWatchMonetizationTypes
}

func (o *DiscoverMovieRequest) GetWithWatchProviders() *string {
	if o == nil {
		return nil
	}
	return o.WithWatchProviders
}

func (o *DiscoverMovieRequest) GetWithoutCompanies() *string {
	if o == nil {
		return nil
	}
	return o.WithoutCompanies
}

func (o *DiscoverMovieRequest) GetWithoutGenres() *string {
	if o == nil {
		return nil
	}
	return o.WithoutGenres
}

func (o *DiscoverMovieRequest) GetWithoutKeywords() *string {
	if o == nil {
		return nil
	}
	return o.WithoutKeywords
}

func (o *DiscoverMovieRequest) GetWithoutWatchProviders() *string {
	if o == nil {
		return nil
	}
	return o.WithoutWatchProviders
}

func (o *DiscoverMovieRequest) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

type DiscoverMovie200ApplicationJSONResults struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Video            *bool    `default:"true" json:"video"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (d DiscoverMovie200ApplicationJSONResults) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscoverMovie200ApplicationJSONResults) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DiscoverMovie200ApplicationJSONResults) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *DiscoverMovie200ApplicationJSONResults) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *DiscoverMovie200ApplicationJSONResults) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *DiscoverMovie200ApplicationJSONResults) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DiscoverMovie200ApplicationJSONResults) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *DiscoverMovie200ApplicationJSONResults) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *DiscoverMovie200ApplicationJSONResults) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *DiscoverMovie200ApplicationJSONResults) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *DiscoverMovie200ApplicationJSONResults) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *DiscoverMovie200ApplicationJSONResults) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *DiscoverMovie200ApplicationJSONResults) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *DiscoverMovie200ApplicationJSONResults) GetVideo() *bool {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *DiscoverMovie200ApplicationJSONResults) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *DiscoverMovie200ApplicationJSONResults) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

// DiscoverMovie200ApplicationJSON - 200
type DiscoverMovie200ApplicationJSON struct {
	Page         *int64                                   `default:"0" json:"page"`
	Results      []DiscoverMovie200ApplicationJSONResults `json:"results,omitempty"`
	TotalPages   *int64                                   `default:"0" json:"total_pages"`
	TotalResults *int64                                   `default:"0" json:"total_results"`
}

func (d DiscoverMovie200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscoverMovie200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DiscoverMovie200ApplicationJSON) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *DiscoverMovie200ApplicationJSON) GetResults() []DiscoverMovie200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *DiscoverMovie200ApplicationJSON) GetTotalPages() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalPages
}

func (o *DiscoverMovie200ApplicationJSON) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

type DiscoverMovieResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	DiscoverMovie200ApplicationJSONObject *DiscoverMovie200ApplicationJSON
}

func (o *DiscoverMovieResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *DiscoverMovieResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *DiscoverMovieResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *DiscoverMovieResponse) GetDiscoverMovie200ApplicationJSONObject() *DiscoverMovie200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.DiscoverMovie200ApplicationJSONObject
}
