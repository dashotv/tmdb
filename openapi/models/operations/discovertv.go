// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dashotv/tmdb/openapi/types"
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type DiscoverTvSortBy string

const (
	DiscoverTvSortByPopularityAsc          DiscoverTvSortBy = "popularity.asc"
	DiscoverTvSortByPopularityDesc         DiscoverTvSortBy = "popularity.desc"
	DiscoverTvSortByRevenueAsc             DiscoverTvSortBy = "revenue.asc"
	DiscoverTvSortByRevenueDesc            DiscoverTvSortBy = "revenue.desc"
	DiscoverTvSortByPrimaryReleaseDateAsc  DiscoverTvSortBy = "primary_release_date.asc"
	DiscoverTvSortByPrimaryReleaseDateDesc DiscoverTvSortBy = "primary_release_date.desc"
	DiscoverTvSortByVoteAverageAsc         DiscoverTvSortBy = "vote_average.asc"
	DiscoverTvSortByVoteAverageDesc        DiscoverTvSortBy = "vote_average.desc"
	DiscoverTvSortByVoteCountAsc           DiscoverTvSortBy = "vote_count.asc"
	DiscoverTvSortByVoteCountDesc          DiscoverTvSortBy = "vote_count.desc"
)

func (e DiscoverTvSortBy) ToPointer() *DiscoverTvSortBy {
	return &e
}

func (e *DiscoverTvSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "popularity.asc":
		fallthrough
	case "popularity.desc":
		fallthrough
	case "revenue.asc":
		fallthrough
	case "revenue.desc":
		fallthrough
	case "primary_release_date.asc":
		fallthrough
	case "primary_release_date.desc":
		fallthrough
	case "vote_average.asc":
		fallthrough
	case "vote_average.desc":
		fallthrough
	case "vote_count.asc":
		fallthrough
	case "vote_count.desc":
		*e = DiscoverTvSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscoverTvSortBy: %v", v)
	}
}

type DiscoverTvRequest struct {
	AirDateGte               *types.Date       `queryParam:"style=form,explode=true,name=air_date.gte"`
	AirDateLte               *types.Date       `queryParam:"style=form,explode=true,name=air_date.lte"`
	FirstAirDateGte          *types.Date       `queryParam:"style=form,explode=true,name=first_air_date.gte"`
	FirstAirDateLte          *types.Date       `queryParam:"style=form,explode=true,name=first_air_date.lte"`
	FirstAirDateYear         *int              `queryParam:"style=form,explode=true,name=first_air_date_year"`
	IncludeAdult             *bool             `default:"false" queryParam:"style=form,explode=true,name=include_adult"`
	IncludeNullFirstAirDates *bool             `default:"false" queryParam:"style=form,explode=true,name=include_null_first_air_dates"`
	Language                 *string           `default:"en-US" queryParam:"style=form,explode=true,name=language"`
	Page                     *int              `default:"1" queryParam:"style=form,explode=true,name=page"`
	ScreenedTheatrically     *bool             `queryParam:"style=form,explode=true,name=screened_theatrically"`
	SortBy                   *DiscoverTvSortBy `default:"popularity.desc" queryParam:"style=form,explode=true,name=sort_by"`
	Timezone                 *string           `queryParam:"style=form,explode=true,name=timezone"`
	VoteAverageGte           *float32          `queryParam:"style=form,explode=true,name=vote_average.gte"`
	VoteAverageLte           *float32          `queryParam:"style=form,explode=true,name=vote_average.lte"`
	VoteCountGte             *float32          `queryParam:"style=form,explode=true,name=vote_count.gte"`
	VoteCountLte             *float32          `queryParam:"style=form,explode=true,name=vote_count.lte"`
	WatchRegion              *string           `queryParam:"style=form,explode=true,name=watch_region"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithCompanies *string `queryParam:"style=form,explode=true,name=with_companies"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithGenres *string `queryParam:"style=form,explode=true,name=with_genres"`
	// can be a comma (`AND`) or pipe (`OR`) separated query
	WithKeywords         *string `queryParam:"style=form,explode=true,name=with_keywords"`
	WithNetworks         *int    `queryParam:"style=form,explode=true,name=with_networks"`
	WithOriginCountry    *string `queryParam:"style=form,explode=true,name=with_origin_country"`
	WithOriginalLanguage *string `queryParam:"style=form,explode=true,name=with_original_language"`
	WithRuntimeGte       *int    `queryParam:"style=form,explode=true,name=with_runtime.gte"`
	WithRuntimeLte       *int    `queryParam:"style=form,explode=true,name=with_runtime.lte"`
	// possible values are: [0, 1, 2, 3, 4, 5], can be a comma (`AND`) or pipe (`OR`) separated query
	WithStatus *string `queryParam:"style=form,explode=true,name=with_status"`
	// possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (`AND`) or pipe (`OR`) separated query
	WithType *string `queryParam:"style=form,explode=true,name=with_type"`
	// possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
	WithWatchMonetizationTypes *string `queryParam:"style=form,explode=true,name=with_watch_monetization_types"`
	// use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
	WithWatchProviders    *string `queryParam:"style=form,explode=true,name=with_watch_providers"`
	WithoutCompanies      *string `queryParam:"style=form,explode=true,name=without_companies"`
	WithoutGenres         *string `queryParam:"style=form,explode=true,name=without_genres"`
	WithoutKeywords       *string `queryParam:"style=form,explode=true,name=without_keywords"`
	WithoutWatchProviders *string `queryParam:"style=form,explode=true,name=without_watch_providers"`
}

func (d DiscoverTvRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscoverTvRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DiscoverTvRequest) GetAirDateGte() *types.Date {
	if o == nil {
		return nil
	}
	return o.AirDateGte
}

func (o *DiscoverTvRequest) GetAirDateLte() *types.Date {
	if o == nil {
		return nil
	}
	return o.AirDateLte
}

func (o *DiscoverTvRequest) GetFirstAirDateGte() *types.Date {
	if o == nil {
		return nil
	}
	return o.FirstAirDateGte
}

func (o *DiscoverTvRequest) GetFirstAirDateLte() *types.Date {
	if o == nil {
		return nil
	}
	return o.FirstAirDateLte
}

func (o *DiscoverTvRequest) GetFirstAirDateYear() *int {
	if o == nil {
		return nil
	}
	return o.FirstAirDateYear
}

func (o *DiscoverTvRequest) GetIncludeAdult() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeAdult
}

func (o *DiscoverTvRequest) GetIncludeNullFirstAirDates() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeNullFirstAirDates
}

func (o *DiscoverTvRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *DiscoverTvRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *DiscoverTvRequest) GetScreenedTheatrically() *bool {
	if o == nil {
		return nil
	}
	return o.ScreenedTheatrically
}

func (o *DiscoverTvRequest) GetSortBy() *DiscoverTvSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *DiscoverTvRequest) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *DiscoverTvRequest) GetVoteAverageGte() *float32 {
	if o == nil {
		return nil
	}
	return o.VoteAverageGte
}

func (o *DiscoverTvRequest) GetVoteAverageLte() *float32 {
	if o == nil {
		return nil
	}
	return o.VoteAverageLte
}

func (o *DiscoverTvRequest) GetVoteCountGte() *float32 {
	if o == nil {
		return nil
	}
	return o.VoteCountGte
}

func (o *DiscoverTvRequest) GetVoteCountLte() *float32 {
	if o == nil {
		return nil
	}
	return o.VoteCountLte
}

func (o *DiscoverTvRequest) GetWatchRegion() *string {
	if o == nil {
		return nil
	}
	return o.WatchRegion
}

func (o *DiscoverTvRequest) GetWithCompanies() *string {
	if o == nil {
		return nil
	}
	return o.WithCompanies
}

func (o *DiscoverTvRequest) GetWithGenres() *string {
	if o == nil {
		return nil
	}
	return o.WithGenres
}

func (o *DiscoverTvRequest) GetWithKeywords() *string {
	if o == nil {
		return nil
	}
	return o.WithKeywords
}

func (o *DiscoverTvRequest) GetWithNetworks() *int {
	if o == nil {
		return nil
	}
	return o.WithNetworks
}

func (o *DiscoverTvRequest) GetWithOriginCountry() *string {
	if o == nil {
		return nil
	}
	return o.WithOriginCountry
}

func (o *DiscoverTvRequest) GetWithOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.WithOriginalLanguage
}

func (o *DiscoverTvRequest) GetWithRuntimeGte() *int {
	if o == nil {
		return nil
	}
	return o.WithRuntimeGte
}

func (o *DiscoverTvRequest) GetWithRuntimeLte() *int {
	if o == nil {
		return nil
	}
	return o.WithRuntimeLte
}

func (o *DiscoverTvRequest) GetWithStatus() *string {
	if o == nil {
		return nil
	}
	return o.WithStatus
}

func (o *DiscoverTvRequest) GetWithType() *string {
	if o == nil {
		return nil
	}
	return o.WithType
}

func (o *DiscoverTvRequest) GetWithWatchMonetizationTypes() *string {
	if o == nil {
		return nil
	}
	return o.WithWatchMonetizationTypes
}

func (o *DiscoverTvRequest) GetWithWatchProviders() *string {
	if o == nil {
		return nil
	}
	return o.WithWatchProviders
}

func (o *DiscoverTvRequest) GetWithoutCompanies() *string {
	if o == nil {
		return nil
	}
	return o.WithoutCompanies
}

func (o *DiscoverTvRequest) GetWithoutGenres() *string {
	if o == nil {
		return nil
	}
	return o.WithoutGenres
}

func (o *DiscoverTvRequest) GetWithoutKeywords() *string {
	if o == nil {
		return nil
	}
	return o.WithoutKeywords
}

func (o *DiscoverTvRequest) GetWithoutWatchProviders() *string {
	if o == nil {
		return nil
	}
	return o.WithoutWatchProviders
}

type DiscoverTv200ApplicationJSONResults struct {
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	FirstAirDate     *string  `json:"first_air_date,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	Name             *string  `json:"name,omitempty"`
	OriginCountry    []string `json:"origin_country,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalName     *string  `json:"original_name,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	VoteAverage      *int64   `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (d DiscoverTv200ApplicationJSONResults) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscoverTv200ApplicationJSONResults) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DiscoverTv200ApplicationJSONResults) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *DiscoverTv200ApplicationJSONResults) GetFirstAirDate() *string {
	if o == nil {
		return nil
	}
	return o.FirstAirDate
}

func (o *DiscoverTv200ApplicationJSONResults) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *DiscoverTv200ApplicationJSONResults) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DiscoverTv200ApplicationJSONResults) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DiscoverTv200ApplicationJSONResults) GetOriginCountry() []string {
	if o == nil {
		return nil
	}
	return o.OriginCountry
}

func (o *DiscoverTv200ApplicationJSONResults) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *DiscoverTv200ApplicationJSONResults) GetOriginalName() *string {
	if o == nil {
		return nil
	}
	return o.OriginalName
}

func (o *DiscoverTv200ApplicationJSONResults) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *DiscoverTv200ApplicationJSONResults) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *DiscoverTv200ApplicationJSONResults) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *DiscoverTv200ApplicationJSONResults) GetVoteAverage() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *DiscoverTv200ApplicationJSONResults) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

// DiscoverTv200ApplicationJSON - 200
type DiscoverTv200ApplicationJSON struct {
	Page         *int64                                `default:"0" json:"page"`
	Results      []DiscoverTv200ApplicationJSONResults `json:"results,omitempty"`
	TotalPages   *int64                                `default:"0" json:"total_pages"`
	TotalResults *int64                                `default:"0" json:"total_results"`
}

func (d DiscoverTv200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscoverTv200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DiscoverTv200ApplicationJSON) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *DiscoverTv200ApplicationJSON) GetResults() []DiscoverTv200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *DiscoverTv200ApplicationJSON) GetTotalPages() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalPages
}

func (o *DiscoverTv200ApplicationJSON) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

type DiscoverTvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	DiscoverTv200ApplicationJSONObject *DiscoverTv200ApplicationJSON
}

func (o *DiscoverTvResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *DiscoverTvResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *DiscoverTvResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *DiscoverTvResponse) GetDiscoverTv200ApplicationJSONObject() *DiscoverTv200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.DiscoverTv200ApplicationJSONObject
}
