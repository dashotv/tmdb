// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type ReviewDetailsRequest struct {
	ReviewID string `pathParam:"style=simple,explode=false,name=review_id"`
}

func (o *ReviewDetailsRequest) GetReviewID() string {
	if o == nil {
		return ""
	}
	return o.ReviewID
}

type ReviewDetails200ApplicationJSONAuthorDetails struct {
	AvatarPath *string  `json:"avatar_path,omitempty"`
	Name       *string  `json:"name,omitempty"`
	Rating     *float64 `default:"0" json:"rating"`
	Username   *string  `json:"username,omitempty"`
}

func (r ReviewDetails200ApplicationJSONAuthorDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReviewDetails200ApplicationJSONAuthorDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ReviewDetails200ApplicationJSONAuthorDetails) GetAvatarPath() *string {
	if o == nil {
		return nil
	}
	return o.AvatarPath
}

func (o *ReviewDetails200ApplicationJSONAuthorDetails) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ReviewDetails200ApplicationJSONAuthorDetails) GetRating() *float64 {
	if o == nil {
		return nil
	}
	return o.Rating
}

func (o *ReviewDetails200ApplicationJSONAuthorDetails) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// ReviewDetails200ApplicationJSON - 200
type ReviewDetails200ApplicationJSON struct {
	Author        *string                                       `json:"author,omitempty"`
	AuthorDetails *ReviewDetails200ApplicationJSONAuthorDetails `json:"author_details,omitempty"`
	Content       *string                                       `json:"content,omitempty"`
	CreatedAt     *string                                       `json:"created_at,omitempty"`
	ID            *string                                       `json:"id,omitempty"`
	Iso6391       *string                                       `json:"iso_639_1,omitempty"`
	MediaID       *int64                                        `default:"0" json:"media_id"`
	MediaTitle    *string                                       `json:"media_title,omitempty"`
	MediaType     *string                                       `json:"media_type,omitempty"`
	UpdatedAt     *string                                       `json:"updated_at,omitempty"`
	URL           *string                                       `json:"url,omitempty"`
}

func (r ReviewDetails200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReviewDetails200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ReviewDetails200ApplicationJSON) GetAuthor() *string {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *ReviewDetails200ApplicationJSON) GetAuthorDetails() *ReviewDetails200ApplicationJSONAuthorDetails {
	if o == nil {
		return nil
	}
	return o.AuthorDetails
}

func (o *ReviewDetails200ApplicationJSON) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *ReviewDetails200ApplicationJSON) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ReviewDetails200ApplicationJSON) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ReviewDetails200ApplicationJSON) GetIso6391() *string {
	if o == nil {
		return nil
	}
	return o.Iso6391
}

func (o *ReviewDetails200ApplicationJSON) GetMediaID() *int64 {
	if o == nil {
		return nil
	}
	return o.MediaID
}

func (o *ReviewDetails200ApplicationJSON) GetMediaTitle() *string {
	if o == nil {
		return nil
	}
	return o.MediaTitle
}

func (o *ReviewDetails200ApplicationJSON) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *ReviewDetails200ApplicationJSON) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ReviewDetails200ApplicationJSON) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type ReviewDetailsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	ReviewDetails200ApplicationJSONObject *ReviewDetails200ApplicationJSON
}

func (o *ReviewDetailsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ReviewDetailsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ReviewDetailsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ReviewDetailsResponse) GetReviewDetails200ApplicationJSONObject() *ReviewDetails200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ReviewDetails200ApplicationJSONObject
}
