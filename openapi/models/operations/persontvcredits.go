// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type PersonTvCreditsRequest struct {
	PersonID int     `pathParam:"style=simple,explode=false,name=person_id"`
	Language *string `default:"en-US" queryParam:"style=form,explode=true,name=language"`
}

func (p PersonTvCreditsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonTvCreditsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonTvCreditsRequest) GetPersonID() int {
	if o == nil {
		return 0
	}
	return o.PersonID
}

func (o *PersonTvCreditsRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

type PersonTvCredits200ApplicationJSONCast struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	Character        *string  `json:"character,omitempty"`
	CreditID         *string  `json:"credit_id,omitempty"`
	EpisodeCount     *int64   `default:"0" json:"episode_count"`
	FirstAirDate     *string  `json:"first_air_date,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	Name             *string  `json:"name,omitempty"`
	OriginCountry    []string `json:"origin_country,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalName     *string  `json:"original_name,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (p PersonTvCredits200ApplicationJSONCast) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonTvCredits200ApplicationJSONCast) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonTvCredits200ApplicationJSONCast) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *PersonTvCredits200ApplicationJSONCast) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *PersonTvCredits200ApplicationJSONCast) GetCharacter() *string {
	if o == nil {
		return nil
	}
	return o.Character
}

func (o *PersonTvCredits200ApplicationJSONCast) GetCreditID() *string {
	if o == nil {
		return nil
	}
	return o.CreditID
}

func (o *PersonTvCredits200ApplicationJSONCast) GetEpisodeCount() *int64 {
	if o == nil {
		return nil
	}
	return o.EpisodeCount
}

func (o *PersonTvCredits200ApplicationJSONCast) GetFirstAirDate() *string {
	if o == nil {
		return nil
	}
	return o.FirstAirDate
}

func (o *PersonTvCredits200ApplicationJSONCast) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *PersonTvCredits200ApplicationJSONCast) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PersonTvCredits200ApplicationJSONCast) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PersonTvCredits200ApplicationJSONCast) GetOriginCountry() []string {
	if o == nil {
		return nil
	}
	return o.OriginCountry
}

func (o *PersonTvCredits200ApplicationJSONCast) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *PersonTvCredits200ApplicationJSONCast) GetOriginalName() *string {
	if o == nil {
		return nil
	}
	return o.OriginalName
}

func (o *PersonTvCredits200ApplicationJSONCast) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *PersonTvCredits200ApplicationJSONCast) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *PersonTvCredits200ApplicationJSONCast) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *PersonTvCredits200ApplicationJSONCast) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *PersonTvCredits200ApplicationJSONCast) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

type PersonTvCredits200ApplicationJSONCrew struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	CreditID         *string  `json:"credit_id,omitempty"`
	Department       *string  `json:"department,omitempty"`
	EpisodeCount     *int64   `default:"0" json:"episode_count"`
	FirstAirDate     *string  `json:"first_air_date,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	Job              *string  `json:"job,omitempty"`
	Name             *string  `json:"name,omitempty"`
	OriginCountry    []string `json:"origin_country,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalName     *string  `json:"original_name,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (p PersonTvCredits200ApplicationJSONCrew) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonTvCredits200ApplicationJSONCrew) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetCreditID() *string {
	if o == nil {
		return nil
	}
	return o.CreditID
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetEpisodeCount() *int64 {
	if o == nil {
		return nil
	}
	return o.EpisodeCount
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetFirstAirDate() *string {
	if o == nil {
		return nil
	}
	return o.FirstAirDate
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetJob() *string {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetOriginCountry() []string {
	if o == nil {
		return nil
	}
	return o.OriginCountry
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetOriginalName() *string {
	if o == nil {
		return nil
	}
	return o.OriginalName
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *PersonTvCredits200ApplicationJSONCrew) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

// PersonTvCredits200ApplicationJSON - 200
type PersonTvCredits200ApplicationJSON struct {
	Cast []PersonTvCredits200ApplicationJSONCast `json:"cast,omitempty"`
	Crew []PersonTvCredits200ApplicationJSONCrew `json:"crew,omitempty"`
	ID   *int64                                  `default:"0" json:"id"`
}

func (p PersonTvCredits200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonTvCredits200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonTvCredits200ApplicationJSON) GetCast() []PersonTvCredits200ApplicationJSONCast {
	if o == nil {
		return nil
	}
	return o.Cast
}

func (o *PersonTvCredits200ApplicationJSON) GetCrew() []PersonTvCredits200ApplicationJSONCrew {
	if o == nil {
		return nil
	}
	return o.Crew
}

func (o *PersonTvCredits200ApplicationJSON) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

type PersonTvCreditsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	PersonTvCredits200ApplicationJSONObject *PersonTvCredits200ApplicationJSON
}

func (o *PersonTvCreditsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PersonTvCreditsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PersonTvCreditsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PersonTvCreditsResponse) GetPersonTvCredits200ApplicationJSONObject() *PersonTvCredits200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.PersonTvCredits200ApplicationJSONObject
}
