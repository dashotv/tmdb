// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type MovieSimilarRequest struct {
	MovieID  int     `pathParam:"style=simple,explode=false,name=movie_id"`
	Language *string `default:"en-US" queryParam:"style=form,explode=true,name=language"`
	Page     *int    `default:"1" queryParam:"style=form,explode=true,name=page"`
}

func (m MovieSimilarRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovieSimilarRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MovieSimilarRequest) GetMovieID() int {
	if o == nil {
		return 0
	}
	return o.MovieID
}

func (o *MovieSimilarRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *MovieSimilarRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

type MovieSimilar200ApplicationJSONResults struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Video            *bool    `default:"true" json:"video"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (m MovieSimilar200ApplicationJSONResults) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovieSimilar200ApplicationJSONResults) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MovieSimilar200ApplicationJSONResults) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *MovieSimilar200ApplicationJSONResults) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *MovieSimilar200ApplicationJSONResults) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *MovieSimilar200ApplicationJSONResults) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MovieSimilar200ApplicationJSONResults) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *MovieSimilar200ApplicationJSONResults) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *MovieSimilar200ApplicationJSONResults) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *MovieSimilar200ApplicationJSONResults) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *MovieSimilar200ApplicationJSONResults) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *MovieSimilar200ApplicationJSONResults) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *MovieSimilar200ApplicationJSONResults) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *MovieSimilar200ApplicationJSONResults) GetVideo() *bool {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *MovieSimilar200ApplicationJSONResults) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *MovieSimilar200ApplicationJSONResults) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

// MovieSimilar200ApplicationJSON - 200
type MovieSimilar200ApplicationJSON struct {
	Page         *int64                                  `default:"0" json:"page"`
	Results      []MovieSimilar200ApplicationJSONResults `json:"results,omitempty"`
	TotalPages   *int64                                  `default:"0" json:"total_pages"`
	TotalResults *int64                                  `default:"0" json:"total_results"`
}

func (m MovieSimilar200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovieSimilar200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MovieSimilar200ApplicationJSON) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *MovieSimilar200ApplicationJSON) GetResults() []MovieSimilar200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *MovieSimilar200ApplicationJSON) GetTotalPages() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalPages
}

func (o *MovieSimilar200ApplicationJSON) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

type MovieSimilarResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	MovieSimilar200ApplicationJSONObject *MovieSimilar200ApplicationJSON
}

func (o *MovieSimilarResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *MovieSimilarResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *MovieSimilarResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *MovieSimilarResponse) GetMovieSimilar200ApplicationJSONObject() *MovieSimilar200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.MovieSimilar200ApplicationJSONObject
}
