// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type TrendingMoviesTimeWindow string

const (
	TrendingMoviesTimeWindowDay  TrendingMoviesTimeWindow = "day"
	TrendingMoviesTimeWindowWeek TrendingMoviesTimeWindow = "week"
)

func (e TrendingMoviesTimeWindow) ToPointer() *TrendingMoviesTimeWindow {
	return &e
}

func (e *TrendingMoviesTimeWindow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "week":
		*e = TrendingMoviesTimeWindow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrendingMoviesTimeWindow: %v", v)
	}
}

type TrendingMoviesRequest struct {
	TimeWindow TrendingMoviesTimeWindow `default:"day" pathParam:"style=simple,explode=false,name=time_window"`
	// `ISO-639-1`-`ISO-3166-1` code
	Language *string `default:"en-US" queryParam:"style=form,explode=true,name=language"`
}

func (t TrendingMoviesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrendingMoviesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TrendingMoviesRequest) GetTimeWindow() TrendingMoviesTimeWindow {
	if o == nil {
		return TrendingMoviesTimeWindow("")
	}
	return o.TimeWindow
}

func (o *TrendingMoviesRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

type TrendingMovies200ApplicationJSONResults struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	MediaType        *string  `json:"media_type,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float64 `default:"0" json:"popularity"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Video            *bool    `default:"true" json:"video"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (t TrendingMovies200ApplicationJSONResults) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrendingMovies200ApplicationJSONResults) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TrendingMovies200ApplicationJSONResults) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *TrendingMovies200ApplicationJSONResults) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *TrendingMovies200ApplicationJSONResults) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *TrendingMovies200ApplicationJSONResults) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TrendingMovies200ApplicationJSONResults) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *TrendingMovies200ApplicationJSONResults) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *TrendingMovies200ApplicationJSONResults) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *TrendingMovies200ApplicationJSONResults) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *TrendingMovies200ApplicationJSONResults) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *TrendingMovies200ApplicationJSONResults) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *TrendingMovies200ApplicationJSONResults) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *TrendingMovies200ApplicationJSONResults) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *TrendingMovies200ApplicationJSONResults) GetVideo() *bool {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *TrendingMovies200ApplicationJSONResults) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *TrendingMovies200ApplicationJSONResults) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

// TrendingMovies200ApplicationJSON - 200
type TrendingMovies200ApplicationJSON struct {
	Page         *int64                                    `default:"0" json:"page"`
	Results      []TrendingMovies200ApplicationJSONResults `json:"results,omitempty"`
	TotalPages   *int64                                    `default:"0" json:"total_pages"`
	TotalResults *int64                                    `default:"0" json:"total_results"`
}

func (t TrendingMovies200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrendingMovies200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TrendingMovies200ApplicationJSON) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *TrendingMovies200ApplicationJSON) GetResults() []TrendingMovies200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *TrendingMovies200ApplicationJSON) GetTotalPages() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalPages
}

func (o *TrendingMovies200ApplicationJSON) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

type TrendingMoviesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	TrendingMovies200ApplicationJSONObject *TrendingMovies200ApplicationJSON
}

func (o *TrendingMoviesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TrendingMoviesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TrendingMoviesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *TrendingMoviesResponse) GetTrendingMovies200ApplicationJSONObject() *TrendingMovies200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.TrendingMovies200ApplicationJSONObject
}
