// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type PersonPopularListRequest struct {
	Language *string `default:"en-US" queryParam:"style=form,explode=true,name=language"`
	Page     *int    `default:"1" queryParam:"style=form,explode=true,name=page"`
}

func (p PersonPopularListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonPopularListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonPopularListRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *PersonPopularListRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

type PersonPopularList200ApplicationJSONResultsKnownFor struct {
	Adult            *bool    `default:"true" json:"adult"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	GenreIds         []int64  `json:"genre_ids,omitempty"`
	ID               *int64   `default:"0" json:"id"`
	MediaType        *string  `json:"media_type,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Video            *bool    `default:"true" json:"video"`
	VoteAverage      *float64 `default:"0" json:"vote_average"`
	VoteCount        *int64   `default:"0" json:"vote_count"`
}

func (p PersonPopularList200ApplicationJSONResultsKnownFor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonPopularList200ApplicationJSONResultsKnownFor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetVideo() *bool {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *PersonPopularList200ApplicationJSONResultsKnownFor) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

type PersonPopularList200ApplicationJSONResults struct {
	Adult              *bool                                                `default:"true" json:"adult"`
	Gender             *int64                                               `default:"0" json:"gender"`
	ID                 *int64                                               `default:"0" json:"id"`
	KnownFor           []PersonPopularList200ApplicationJSONResultsKnownFor `json:"known_for,omitempty"`
	KnownForDepartment *string                                              `json:"known_for_department,omitempty"`
	Name               *string                                              `json:"name,omitempty"`
	Popularity         *float64                                             `default:"0" json:"popularity"`
	ProfilePath        *string                                              `json:"profile_path,omitempty"`
}

func (p PersonPopularList200ApplicationJSONResults) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonPopularList200ApplicationJSONResults) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonPopularList200ApplicationJSONResults) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *PersonPopularList200ApplicationJSONResults) GetGender() *int64 {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *PersonPopularList200ApplicationJSONResults) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PersonPopularList200ApplicationJSONResults) GetKnownFor() []PersonPopularList200ApplicationJSONResultsKnownFor {
	if o == nil {
		return nil
	}
	return o.KnownFor
}

func (o *PersonPopularList200ApplicationJSONResults) GetKnownForDepartment() *string {
	if o == nil {
		return nil
	}
	return o.KnownForDepartment
}

func (o *PersonPopularList200ApplicationJSONResults) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PersonPopularList200ApplicationJSONResults) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *PersonPopularList200ApplicationJSONResults) GetProfilePath() *string {
	if o == nil {
		return nil
	}
	return o.ProfilePath
}

// PersonPopularList200ApplicationJSON - 200
type PersonPopularList200ApplicationJSON struct {
	Page         *int64                                       `default:"0" json:"page"`
	Results      []PersonPopularList200ApplicationJSONResults `json:"results,omitempty"`
	TotalPages   *int64                                       `default:"0" json:"total_pages"`
	TotalResults *int64                                       `default:"0" json:"total_results"`
}

func (p PersonPopularList200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonPopularList200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonPopularList200ApplicationJSON) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *PersonPopularList200ApplicationJSON) GetResults() []PersonPopularList200ApplicationJSONResults {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *PersonPopularList200ApplicationJSON) GetTotalPages() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalPages
}

func (o *PersonPopularList200ApplicationJSON) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

type PersonPopularListResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	PersonPopularList200ApplicationJSONObject *PersonPopularList200ApplicationJSON
}

func (o *PersonPopularListResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PersonPopularListResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PersonPopularListResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PersonPopularListResponse) GetPersonPopularList200ApplicationJSONObject() *PersonPopularList200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.PersonPopularList200ApplicationJSONObject
}
