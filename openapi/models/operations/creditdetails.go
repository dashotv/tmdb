// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/dashotv/tmdb/openapi/utils"
	"net/http"
)

type CreditDetailsRequest struct {
	CreditID string `pathParam:"style=simple,explode=false,name=credit_id"`
}

func (o *CreditDetailsRequest) GetCreditID() string {
	if o == nil {
		return ""
	}
	return o.CreditID
}

type CreditDetails200ApplicationJSONMediaSeasons struct {
	AirDate      *string `json:"air_date,omitempty"`
	EpisodeCount *int64  `default:"0" json:"episode_count"`
	ID           *int64  `default:"0" json:"id"`
	Name         *string `json:"name,omitempty"`
	Overview     *string `json:"overview,omitempty"`
	PosterPath   *string `json:"poster_path,omitempty"`
	SeasonNumber *int64  `default:"0" json:"season_number"`
	ShowID       *int64  `default:"0" json:"show_id"`
}

func (c CreditDetails200ApplicationJSONMediaSeasons) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreditDetails200ApplicationJSONMediaSeasons) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreditDetails200ApplicationJSONMediaSeasons) GetAirDate() *string {
	if o == nil {
		return nil
	}
	return o.AirDate
}

func (o *CreditDetails200ApplicationJSONMediaSeasons) GetEpisodeCount() *int64 {
	if o == nil {
		return nil
	}
	return o.EpisodeCount
}

func (o *CreditDetails200ApplicationJSONMediaSeasons) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreditDetails200ApplicationJSONMediaSeasons) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreditDetails200ApplicationJSONMediaSeasons) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *CreditDetails200ApplicationJSONMediaSeasons) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *CreditDetails200ApplicationJSONMediaSeasons) GetSeasonNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.SeasonNumber
}

func (o *CreditDetails200ApplicationJSONMediaSeasons) GetShowID() *int64 {
	if o == nil {
		return nil
	}
	return o.ShowID
}

type CreditDetails200ApplicationJSONMedia struct {
	Adult            *bool                                         `default:"true" json:"adult"`
	BackdropPath     *string                                       `json:"backdrop_path,omitempty"`
	Character        *string                                       `json:"character,omitempty"`
	Episodes         []interface{}                                 `json:"episodes,omitempty"`
	FirstAirDate     *string                                       `json:"first_air_date,omitempty"`
	GenreIds         []int64                                       `json:"genre_ids,omitempty"`
	ID               *int64                                        `default:"0" json:"id"`
	MediaType        *string                                       `json:"media_type,omitempty"`
	Name             *string                                       `json:"name,omitempty"`
	OriginCountry    []string                                      `json:"origin_country,omitempty"`
	OriginalLanguage *string                                       `json:"original_language,omitempty"`
	OriginalName     *string                                       `json:"original_name,omitempty"`
	Overview         *string                                       `json:"overview,omitempty"`
	Popularity       *float64                                      `default:"0" json:"popularity"`
	PosterPath       *string                                       `json:"poster_path,omitempty"`
	Seasons          []CreditDetails200ApplicationJSONMediaSeasons `json:"seasons,omitempty"`
	VoteAverage      *float64                                      `default:"0" json:"vote_average"`
	VoteCount        *int64                                        `default:"0" json:"vote_count"`
}

func (c CreditDetails200ApplicationJSONMedia) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreditDetails200ApplicationJSONMedia) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreditDetails200ApplicationJSONMedia) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *CreditDetails200ApplicationJSONMedia) GetBackdropPath() *string {
	if o == nil {
		return nil
	}
	return o.BackdropPath
}

func (o *CreditDetails200ApplicationJSONMedia) GetCharacter() *string {
	if o == nil {
		return nil
	}
	return o.Character
}

func (o *CreditDetails200ApplicationJSONMedia) GetEpisodes() []interface{} {
	if o == nil {
		return nil
	}
	return o.Episodes
}

func (o *CreditDetails200ApplicationJSONMedia) GetFirstAirDate() *string {
	if o == nil {
		return nil
	}
	return o.FirstAirDate
}

func (o *CreditDetails200ApplicationJSONMedia) GetGenreIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GenreIds
}

func (o *CreditDetails200ApplicationJSONMedia) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreditDetails200ApplicationJSONMedia) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *CreditDetails200ApplicationJSONMedia) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreditDetails200ApplicationJSONMedia) GetOriginCountry() []string {
	if o == nil {
		return nil
	}
	return o.OriginCountry
}

func (o *CreditDetails200ApplicationJSONMedia) GetOriginalLanguage() *string {
	if o == nil {
		return nil
	}
	return o.OriginalLanguage
}

func (o *CreditDetails200ApplicationJSONMedia) GetOriginalName() *string {
	if o == nil {
		return nil
	}
	return o.OriginalName
}

func (o *CreditDetails200ApplicationJSONMedia) GetOverview() *string {
	if o == nil {
		return nil
	}
	return o.Overview
}

func (o *CreditDetails200ApplicationJSONMedia) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *CreditDetails200ApplicationJSONMedia) GetPosterPath() *string {
	if o == nil {
		return nil
	}
	return o.PosterPath
}

func (o *CreditDetails200ApplicationJSONMedia) GetSeasons() []CreditDetails200ApplicationJSONMediaSeasons {
	if o == nil {
		return nil
	}
	return o.Seasons
}

func (o *CreditDetails200ApplicationJSONMedia) GetVoteAverage() *float64 {
	if o == nil {
		return nil
	}
	return o.VoteAverage
}

func (o *CreditDetails200ApplicationJSONMedia) GetVoteCount() *int64 {
	if o == nil {
		return nil
	}
	return o.VoteCount
}

type CreditDetails200ApplicationJSONPerson struct {
	Adult              *bool    `default:"true" json:"adult"`
	Gender             *int64   `default:"0" json:"gender"`
	ID                 *int64   `default:"0" json:"id"`
	KnownForDepartment *string  `json:"known_for_department,omitempty"`
	MediaType          *string  `json:"media_type,omitempty"`
	Name               *string  `json:"name,omitempty"`
	OriginalName       *string  `json:"original_name,omitempty"`
	Popularity         *float64 `default:"0" json:"popularity"`
	ProfilePath        *string  `json:"profile_path,omitempty"`
}

func (c CreditDetails200ApplicationJSONPerson) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreditDetails200ApplicationJSONPerson) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreditDetails200ApplicationJSONPerson) GetAdult() *bool {
	if o == nil {
		return nil
	}
	return o.Adult
}

func (o *CreditDetails200ApplicationJSONPerson) GetGender() *int64 {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *CreditDetails200ApplicationJSONPerson) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreditDetails200ApplicationJSONPerson) GetKnownForDepartment() *string {
	if o == nil {
		return nil
	}
	return o.KnownForDepartment
}

func (o *CreditDetails200ApplicationJSONPerson) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *CreditDetails200ApplicationJSONPerson) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreditDetails200ApplicationJSONPerson) GetOriginalName() *string {
	if o == nil {
		return nil
	}
	return o.OriginalName
}

func (o *CreditDetails200ApplicationJSONPerson) GetPopularity() *float64 {
	if o == nil {
		return nil
	}
	return o.Popularity
}

func (o *CreditDetails200ApplicationJSONPerson) GetProfilePath() *string {
	if o == nil {
		return nil
	}
	return o.ProfilePath
}

// CreditDetails200ApplicationJSON - 200
type CreditDetails200ApplicationJSON struct {
	CreditType *string                                `json:"credit_type,omitempty"`
	Department *string                                `json:"department,omitempty"`
	ID         *string                                `json:"id,omitempty"`
	Job        *string                                `json:"job,omitempty"`
	Media      *CreditDetails200ApplicationJSONMedia  `json:"media,omitempty"`
	MediaType  *string                                `json:"media_type,omitempty"`
	Person     *CreditDetails200ApplicationJSONPerson `json:"person,omitempty"`
}

func (o *CreditDetails200ApplicationJSON) GetCreditType() *string {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *CreditDetails200ApplicationJSON) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *CreditDetails200ApplicationJSON) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreditDetails200ApplicationJSON) GetJob() *string {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *CreditDetails200ApplicationJSON) GetMedia() *CreditDetails200ApplicationJSONMedia {
	if o == nil {
		return nil
	}
	return o.Media
}

func (o *CreditDetails200ApplicationJSON) GetMediaType() *string {
	if o == nil {
		return nil
	}
	return o.MediaType
}

func (o *CreditDetails200ApplicationJSON) GetPerson() *CreditDetails200ApplicationJSONPerson {
	if o == nil {
		return nil
	}
	return o.Person
}

type CreditDetailsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// 200
	CreditDetails200ApplicationJSONObject *CreditDetails200ApplicationJSON
}

func (o *CreditDetailsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreditDetailsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreditDetailsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreditDetailsResponse) GetCreditDetails200ApplicationJSONObject() *CreditDetails200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CreditDetails200ApplicationJSONObject
}
